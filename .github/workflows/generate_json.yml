name: Generate JSON and Commit

# Run this workflow whenever code is pushed to the main branch
on:
  push:
    branches:
      - main # Or your default branch, e.g., master
  workflow_dispatch: #manual trigger condition
  # This allows you to manually trigger the workflow from the GitHub Actions tab

jobs:
  generate_json:
    runs-on: ubuntu-latest

    # Grant the GITHUB_TOKEN permissions to write content
    permissions:
      contents: write # Required to push changes back to the repository

    steps:
    # Step 1: Check out the repository's code
    - name: Checkout code
      uses: actions/checkout@v4 # Use a more recent version if desired

    # Step 2: Set up the Python environment
    - name: Set up Python
      uses: actions/setup-python@v4 # Use a more recent version if desired
      with:
        python-version: '3.x' # Or specify a version like '3.9', '3.10', etc.

    # Step 3: Install Python dependencies (if any)
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Add any libraries your script needs here, e.g.:
        # pip install requests pandas
        # If you have a requirements.txt file:
        # pip install -r requirements.txt

    # Step 4: Run your Python script to generate/update the JSON file
    # IMPORTANT: Ensure this path '/assets/extract_data.py' is correct
    #            relative to the root of your repository.
    - name: Run script to generate data
      run: python ./assets/extract_data.py # Corrected path to be relative
    #- name: Run script to generate data
    #  working-directory: ./assets
    #  run: python extract_data.py

    # Step 5: Commit and push the generated JSON file if it has changed
    - name: Commit and push generated JSON
      run: |
        git config --global user.name "github-actions[bot]" # Standard bot name convention
        git config --global user.email "github-actions[bot]@users.noreply.github.com" # Standard bot email convention
        
        # Check if the file exists before trying to add it
        if [ -f data.json ]; then
          git add data.json
          
          # Check if there are staged changes (specifically for data.json)
          # If 'git diff --staged --quiet' exits with 1, there are changes
          if ! git diff --staged --quiet; then
            echo "Changes detected in generated.json. Committing and pushing..."
            git commit -m "Update data.json [Automated]"
            git push
          else
            echo "No changes detected in data.json. Nothing to commit."
          fi
        else
          echo "Error: data.json not found after running the script."
          exit 1 # Exit with an error code if the file wasn't created
        fi
